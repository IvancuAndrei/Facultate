     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    14 00000000 05                            a db 5
    15 00000001 1400                          b dw 20
    16 00000003 19000000                      c dd 25
    17 00000007 0800000000000000              d dq 8
    18                                  
    19                                  ; (c-a-d)+(c-b)-a 
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 A1[03000000]                    mov eax, [c]; eax = c = 25
    23 00000005 BB00000000                      mov ebx, 0; ebx = 0
    24 0000000A 8A1D[00000000]                  mov bl, [a]; bl = a = 12 -> ebx = a = 5
    25 00000010 29D8                            sub eax, ebx; eax = eax - ebx = c - a = 20
    26 00000012 BA00000000                      mov edx, 0; (conversie fara semn de la eax la edx:eax) edx:eax = c - a = 20
    27 00000017 2B05[07000000]                  sub eax, dword[d]
    28 0000001D 1B15[0B000000]                  sbb edx, dword[d+4]; edx:eax = c - a - d = 12
    29                                          ;eax,edx,ebx folosite
    30 00000023 BB00000000                      mov ebx, 0
    31 00000028 8B1D[03000000]                  mov ebx, [c]; ebx = c = 25
    32 0000002E B900000000                      mov ecx, 0; ecx = 0
    33 00000033 668B0D[01000000]                mov cx, [b]; cx = b = 20
    34 0000003A 29CB                            sub ebx, ecx; ebx = ebx - ecx = c - b = 5
    35 0000003C B900000000                      mov ecx, 0; (conversie fara semn de la ebx la ecx:ebx) ecx:ebx = c - b = 5
    36 00000041 01D8                            add eax, ebx
    37 00000043 11CA                            adc edx, ecx; edx:eax = edx:eax + ebx:ecx = (c - a - d) + (c - b) = 17
    38                                          ;eax, ebx, ecx, edx folosite
    39 00000045 BB00000000                      mov ebx, 0
    40 0000004A 8A1D[00000000]                  mov bl, [a]; bl = a = 12 -> ebx = a = 5
    41 00000050 B900000000                      mov ecx, 0; (conversie fara semn de la ebx la ecx:ebx) ecx:ebx = 5
    42 00000055 29D8                            sub eax, ebx
    43 00000057 19CA                            sbb edx, ecx; edx:eax = (c - a - d) + (c - b) - a = 12
    44                                          
    45                                          
    46                                          
    47                                          
    48                                          
    49                                          
    50 00000059 6A00                            push    dword 0      
    51 0000005B FF15[00000000]                  call    [exit]       
