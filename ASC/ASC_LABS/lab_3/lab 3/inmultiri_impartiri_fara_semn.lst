     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a-doubleword; b-byte; c-word; x-qword
    14 00000000 0E000000                    a dd 14
    15 00000004 06                          b db 6
    16 00000005 0200                        c dw 2
    17 00000007 0100000000000000            x dq 1
    18                                  
    19                                  ; (a + b / c - 1) / (b + 2) - x
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 A0[04000000]                    mov al, [b]; al = b = 6
    23 00000005 B400                            mov ah, 0; conversie fara semn de la al la ax
    24 00000007 66BA0000                        mov dx, 0; conversie fara semn de la ax la dx:ax
    25 0000000B 66F735[05000000]                div word[c]; ax = dx:ax / c = b / c = 3
    26 00000012 660305[00000000]                add ax, word[a]
    27 00000019 660315[02000000]                add dx, word[a+2]; dx:ax = a + b / c = 17
    28 00000020 66BB0100                        mov bx, 1; bx = 1
    29 00000024 66B90000                        mov cx, 0; conversie fara semn de la bx la cx:bx
    30 00000028 6601D8                          add ax, bx
    31 0000002B 6611CA                          adc dx, cx; dx:ax = a + b / c - 1
    32 0000002E 8A1D[04000000]                  mov bl, [b]; bl = b = 6
    33 00000034 B700                            mov bh, 0; conversie fara semn de la bl la bx
    34 00000036 6683C302                        add bx, 2; bx = b + 2 = 8
    35 0000003A 66F7F3                          div bx; ax = dx:ax / bx = (a + b / c - 1) / (b + 2) = 2
    36 0000003D 66BA0000                        mov dx, 0;
    37 00000041 6652                            push dx
    38 00000043 6650                            push ax
    39 00000045 58                              pop eax; eax = dx:ax = (a + b / c - 1) / (b + 2) = 2
    40 00000046 BA00000000                      mov edx, 0; conversie fara semn de la eax la edx:eax
    41 0000004B 8B1D[07000000]                  mov ebx, dword[x]
    42 00000051 8B0D[0B000000]                  mov ecx, dword[x+4]; ecx:ebx = x-qword
    43 00000057 29D8                            sub eax, ebx
    44 00000059 19CA                            sbb edx, ecx; edx:eax = edx:eax - ecx:ebx = (a + b / c - 1) / (b + 2) - x = 1
    45 0000005B 6A00                            push    dword 0      
    46 0000005D FF15[00000000]                  call    [exit]       
