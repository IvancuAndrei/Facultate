     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; A, B - word , C - doubleword  
    14 00000000 9F8A                        A dw 8a9fh
    15 00000002 9AAF                        B dw 0af9ah
    16 00000004 00000000                    C dd 0
    17                                  ; Se dau cuvintele A si B. Se cere dublucuvantul C:
    18                                  ; bitii 0-5 ai lui C coincid cu bitii 3-8 ai lui A 
    19                                  ; bitii 6-8 ai lui C coincid cu bitii 2-4 ai lui B
    20                                  ; bitii 9-15 ai lui C reprezinta bitii 6-12 ai lui A
    21                                  ; bitii 16-31 ai lui C sunt 0
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 BB00000000                      mov ebx, 0; in registrul ebx vom calcula rezultatul 
    25 00000005 66A1[00000000]                  mov ax, [A]; izolam bitii 3-8 ai lui A
    26 0000000B 6625F801                        and ax, 0000000111111000b
    27 0000000F B103                            mov cl, 3
    28 00000011 66D3C8                          ror ax, cl; rotim 3 pozitii spre dreapta
    29 00000014 0FB7C0                          movzx eax, ax;
    30 00000017 09C3                            or ebx, eax; punem bitii in rezultat
    31 00000019 66A1[02000000]                  mov ax, [B]; izolam bitii 2-4 ai lui B
    32 0000001F 6683E01C                        and ax, 0000000000011100b
    33 00000023 66C1E004                        shl ax, 4; mutam 4 pozitii spre stanga
    34 00000027 0FB7C0                          movzx eax, ax
    35 0000002A 09C3                            or ebx, eax
    36 0000002C 66A1[00000000]                  mov ax, [A]; izolam bitii 6-12 ai lui A
    37 00000032 6625C01F                        and ax, 0001111111000000b
    38 00000036 66C1E003                        shl ax, 3; mutam 3 pozitii spre stanga
    39 0000003A 0FB7C0                          movzx eax, ax
    40 0000003D 09C3                            or ebx, eax
    41 0000003F 891D[04000000]                  mov [C], ebx
    42 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000047 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
