     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b,c-byte; e-doubleword; x-qword
    14 00000000 02                          a db 2
    15 00000001 07                          b db 7
    16 00000002 01                          c db 1
    17 00000003 0A000000                    e dd 10
    18 00000007 0B00000000000000            x dq 11
    19                                  
    20                                  ; a / 2 + b * b - a * b * c + e + x = 57
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 660FB605[00000000]              movzx ax, byte[a]; conversie fara semn de la byte-ul a la ax
    24 00000008 B302                            mov bl, 2; bl = 2
    25 0000000A F6F3                            div bl; al = ax / bl = a / 2
    26 0000000C 88C3                            mov bl, al; bl = al = a / 2
    27 0000000E B700                            mov bh, 0; conversie fara semn de la bl la bx
    28 00000010 A0[01000000]                    mov al, [b]; al = b
    29 00000015 F625[01000000]                  mul byte[b]; ax = al * b = b * b 
    30 0000001B 6601C3                          add bx, ax; bx = bx + ax = a / 2 + b * b 
    31 0000001E A0[00000000]                    mov al, [a]; al = a
    32 00000023 F625[01000000]                  mul byte[b]; ax = al * b = a * b
    33 00000029 660FB60D[02000000]              movzx cx, byte[c]; conversie fara semn de la byte-ul c la cx
    34 00000031 66F7E1                          mul cx; dx:ax = ax * cx = a * b * c
    35 00000034 6652                            push dx;
    36 00000036 6650                            push ax;
    37 00000038 58                              pop eax; eax = a * b * c
    38 00000039 0FB7DB                          movzx ebx, bx; conversie fara semn de la bx la ebx
    39 0000003C 29C3                            sub ebx, eax; ebx = a / 2 + b * b - a * b * c
    40 0000003E 031D[03000000]                  add ebx, [e]; ebx = a / 2 + b * b - a * b * c + e
    41 00000044 B900000000                      mov ecx, 0; conversie fara semn de la ebx la ecx:ebx
    42 00000049 A1[07000000]                    mov eax, dword[x]
    43 0000004E 8B15[0B000000]                  mov edx, dword[x+4]; edx:eax = x
    44 00000054 01C3                            add ebx, eax
    45 00000056 11D1                            adc ecx, edx; ecx:ebx = a / 2 + b * b - a * b * c + e + x = 57
    46                                          
    47 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
