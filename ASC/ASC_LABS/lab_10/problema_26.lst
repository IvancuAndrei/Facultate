     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf  msvcrt.dll
    11                                  import printf  msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 2564256400                  format db '%d','%d', 0
    17                                      k equ 10
    18 0000000D 257800                      format_s db '%x', 0
    19                                  ; Se citesc de la tastatura doua numere a si b. Sa se calculeze valoarea expresiei (a-b)*k, k fiind o constanta definita in segmentul de date. Afisati valoarea expresiei (in baza 16). 
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;scanf(format, a, b)
    23 00000000 68[04000000]                    push dword b
    24 00000005 68[00000000]                    push dword a
    25 0000000A 68[08000000]                    push dword format
    26 0000000F FF15[00000000]                  call [scanf]
    27 00000015 83C40C                          add esp, 3 * 4
    28 00000018 66A1[00000000]                  mov ax, word[a]
    29 0000001E 662B05[04000000]                sub ax, word[b]
    30 00000025 66BB0A00                        mov bx, k
    31 00000029 66F7EB                          imul bx
    32 0000002C 6652                            push dx
    33 0000002E 6650                            push ax
    34 00000030 58                              pop eax
    35                                          ;printf(format_s, eax)
    36 00000031 50                              push eax
    37 00000032 68[0D000000]                    push dword format_s
    38 00000037 FF15[00000000]                  call[printf]
    39 0000003D 83C408                          add esp, 2 * 4
    40                                          ; exit(0)
    41 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
