        -:    0:Source:/mnt/d/OOP_laboratoare/Lab_2-4/ofertaService.c
        -:    0:Graph:/mnt/d/OOP_laboratoare/Lab_2-4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/ofertaService.c.gcno
        -:    0:Data:/mnt/d/OOP_laboratoare/Lab_2-4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/ofertaService.c.gcda
        -:    0:Runs:1
        -:    1:#include <string.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "oferta.h"
        -:    4:#include "ofertaRepo.h"
        -:    5:#include <stdio.h>
        -:    6:#include "listaOferte.h"
        -:    7:
        -:    8:
function adauga_oferta_service called 9 returned 100% blocks executed 100%
        9:    9:int adauga_oferta_service(listaOferte *o, int id, char *tip, char *destinatie, char *data_plecare, int pret){
        9:   10:    oferta *Oferta_noua = createOferta(id, tip, destinatie, data_plecare, pret);
        9:   10-block  0
call    0 returned 9
        9:   11:    return(adauga_oferta(o, Oferta_noua));
call    0 returned 9
        -:   12:
        -:   13:}
        -:   14:
function sterge_oferta_service called 1 returned 100% blocks executed 90%
        1:   15:int sterge_oferta_service(listaOferte *o, int id){
        -:   16:    oferta* Oferta_de_sters;
        1:   17:    int ok = 0;
        2:   18:    for(int i = 0; i < o->size; i++)
        1:   18-block  0
        1:   18-block  1
        2:   18-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   19:        if(o->lista[i]->id == id) {
        1:   19-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   20:            Oferta_de_sters = o->lista[i];
        1:   21:            ok = 1;
        1:   21-block  0
        -:   22:        }
        1:   23:    if(ok == 1) {
        1:   23-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   24:        sterge_oferta(o, Oferta_de_sters);
        1:   24-block  0
call    0 returned 1
       1*:   25:        return 0;}else return -1;
    %%%%%:   25-block  0
        -:   26:
        -:   27:}
        -:   28:
function modifica_oferta_service called 1 returned 100% blocks executed 100%
        1:   29:int modifica_oferta_service(listaOferte *o, int id, char *tip, char *destinatie, char *data_plecare, int pret){
        1:   30:    oferta *Oferta_noua = createOferta(id, tip, destinatie, data_plecare, pret);
        1:   30-block  0
call    0 returned 1
        1:   31:    return(modifica_oferta(o, Oferta_noua));
call    0 returned 1
        -:   32:
        -:   33:}
        -:   34:
function sortareDupaPretsiDestinatie called 1 returned 100% blocks executed 100%
        1:   35:void sortareDupaPretsiDestinatie(listaOferte *o, listaOferte *o_ordonat){
        4:   36:    for(int i = 0; i < o->size; i++)
        1:   36-block  0
        4:   36-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   37:        adauga_oferta(o_ordonat, o->lista[i]);
        3:   37-block  0
call    0 returned 3
        3:   38:    for (int i = 0; i < o_ordonat->size - 1; i++)
        1:   38-block  0
        2:   38-block  1
        3:   38-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        5:   39:        for (int j = 0; j < o_ordonat->size - i - 1; j++)
        2:   39-block  0
        3:   39-block  1
        5:   39-block  2
branch  0 taken 3
branch  1 taken 2 (fallthrough)
        3:   40:            if (o_ordonat->lista[j]->pret > o_ordonat->lista[j + 1]->pret){
        3:   40-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   41:                oferta *aux = o_ordonat->lista[j];
        2:   42:                o_ordonat->lista[j] = o_ordonat->lista[j+1];
        2:   43:                o_ordonat->lista[j+1]=aux;
        2:   43-block  0
        -:   44:            }
        1:   45:            else if(o_ordonat->lista[j]->pret == o_ordonat->lista[j+1]->pret){
        1:   45-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   46:                if(strcmp(o_ordonat->lista[j]->destinatie, o_ordonat->lista[j+1]->destinatie) > 0){
        1:   46-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   47:                    oferta *aux = o_ordonat->lista[j];
        1:   48:                    o_ordonat->lista[j] = o_ordonat->lista[j+1];
        1:   49:                    o_ordonat->lista[j+1]=aux;
        1:   49-block  0
        -:   50:                }
        -:   51:            }
        1:   52:}
        -:   53:
function filtrareDupaCriteriu called 3 returned 100% blocks executed 100%
        3:   54:void filtrareDupaCriteriu(listaOferte *o, listaOferte *o_filtrata, char *criteriu, char *argument){
        3:   55:    if(strcmp(criteriu, "destinatie") == 0){
        3:   55-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        4:   56:        for(int i = 0; i < o->size; i++)
        1:   56-block  0
        3:   56-block  1
        4:   56-block  2
branch  0 taken 3
branch  1 taken 1
        3:   57:            if(strcmp(o->lista[i]->destinatie, argument) == 0)
        3:   57-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   58:                adauga_oferta(o_filtrata, o->lista[i]);
        1:   58-block  0
call    0 returned 1
        -:   59:    }
        2:   60:    else if (strcmp(criteriu, "tip") == 0){
        2:   60-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        4:   61:        for(int i = 0; i < o->size; i++)
        1:   61-block  0
        3:   61-block  1
        4:   61-block  2
branch  0 taken 3
branch  1 taken 1
        3:   62:            if(strcmp(o->lista[i]->tip, argument) == 0)
        3:   62-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   63:                adauga_oferta(o_filtrata, o->lista[i]);
        2:   63-block  0
call    0 returned 2
        -:   64:    }
        1:   65:    else if(strcmp(criteriu, "pret") == 0){
        1:   65-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   66:        int pret = atoi(argument);
        4:   67:        for(int i = 0; i < o->size; i++)
        1:   67-block  0
        3:   67-block  1
        4:   67-block  2
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   68:            if(o->lista[i]->pret <= pret)
        3:   68-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:   69:                adauga_oferta(o_filtrata, o->lista[i]);
        2:   69-block  0
call    0 returned 2
        -:   70:
        -:   71:    }
        3:   72:}
        -:   73:
        -:   74:
        -:   75:
        -:   76:
