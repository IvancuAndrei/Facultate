        -:    0:Source:/mnt/d/OOP_laboratoare/Lab_2-4/testOfertaService.c
        -:    0:Graph:/mnt/d/OOP_laboratoare/Lab_2-4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/testOfertaService.c.gcno
        -:    0:Data:/mnt/d/OOP_laboratoare/Lab_2-4/cmake-build-debug-coverage/CMakeFiles/Lab_2_4.dir/testOfertaService.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include "oferta.h"
        -:    6:#include "ofertaService.h"
        -:    7:#include "listaOferte.h"
        -:    8:#include "ofertaRepo.h"
        -:    9:#pragma warning(disable:4996)
        -:   10:
function testAdaugaOfertaService called 1 returned 100% blocks executed 62%
        1:   11:void testAdaugaOfertaService() {
        1:   12:    listaOferte *o = createOList();
        1:   12-block  0
call    0 returned 1
        -:   13:
       1*:   14:    assert(adauga_oferta_service(o, 1, "mare", "spania", "21.04", 100) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   14-block  0
call    3 never executed
        -:   15:
       1*:   16:    assert(o->lista[0]->id == 1);
        1:   16-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   16-block  1
call    2 never executed
       1*:   17:    assert(strcmp(o->lista[0]->tip, "mare") == 0);
        1:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   17-block  1
call    2 never executed
       1*:   18:    assert(strcmp(o->lista[0]->destinatie, "spania") == 0);
        1:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  1
call    2 never executed
       1*:   19:    assert(strcmp(o->lista[0]->data_plecare, "21.04") == 0);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
       1*:   20:    assert(o->lista[0]->pret == 100);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
        1:   21:    deleteLista(o);
        1:   21-block  0
call    0 returned 1
        1:   22:}
        -:   23:
function testStergeOfertaService called 1 returned 100% blocks executed 78%
        1:   24:void testStergeOfertaService() {
        1:   25:    listaOferte *o = createOList();
        1:   25-block  0
call    0 returned 1
        -:   26:
        1:   27:    adauga_oferta_service(o, 1, "mare", "spania", "21.04", 100);
call    0 returned 1
       1*:   28:    assert(sterge_oferta_service(o, 1) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   28-block  0
call    3 never executed
       1*:   29:    assert(o->size == 0);
        1:   29-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   29-block  1
call    2 never executed
        1:   30:    deleteLista(o);
        1:   30-block  0
call    0 returned 1
        1:   31:}
        -:   32:
function testModificaOfertaService called 1 returned 100% blocks executed 65%
        1:   33:void testModificaOfertaService() {
        1:   34:    listaOferte *o = createOList();
        1:   34-block  0
call    0 returned 1
        -:   35:
        1:   36:    adauga_oferta_service(o, 1, "mare", "spania", "21.04", 100);
call    0 returned 1
       1*:   37:    assert(modifica_oferta_service(o, 1, "munte", "italia", "21.05", 150) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   37-block  0
call    3 never executed
       1*:   38:    assert(o->lista[0]->id == 1);
        1:   38-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  1
call    2 never executed
       1*:   39:    assert(strcmp(o->lista[0]->tip, "munte") == 0);
        1:   39-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   39-block  1
call    2 never executed
       1*:   40:    assert(strcmp(o->lista[0]->destinatie, "italia") == 0);
        1:   40-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   40-block  1
call    2 never executed
       1*:   41:    assert(strcmp(o->lista[0]->data_plecare, "21.05") == 0);
        1:   41-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   41-block  1
call    2 never executed
       1*:   42:    assert(o->lista[0]->pret == 150);
        1:   42-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   42-block  1
call    2 never executed
        1:   43:    deleteLista(o);
        1:   43-block  0
call    0 returned 1
        1:   44:}
        -:   45:
function testSortareDupaPretSiDestinatie called 1 returned 100% blocks executed 79%
        1:   46:void testSortareDupaPretSiDestinatie() {
        1:   47:    listaOferte *o = createOList();
        1:   47-block  0
call    0 returned 1
        -:   48:
        1:   49:    adauga_oferta_service(o, 1, "mare", "spania", "22.04", 100);
call    0 returned 1
        1:   50:    adauga_oferta_service(o, 2, "munte", "italia", "23.05", 100);
call    0 returned 1
        1:   51:    adauga_oferta_service(o, 3, "mare", "turcia", "24.06", 50);
call    0 returned 1
        -:   52:
        1:   53:    listaOferte *o_sortat = createOList();
call    0 returned 1
        1:   54:    sortareDupaPretsiDestinatie(o, o_sortat);
call    0 returned 1
       1*:   55:    assert(o_sortat->lista[0]->id == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   55-block  0
call    2 never executed
       1*:   56:    assert(o_sortat->lista[1]->id == 2);
        1:   56-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   56-block  1
call    2 never executed
       1*:   57:    assert(o_sortat->lista[2]->id == 1);
        1:   57-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   57-block  1
call    2 never executed
        1:   58:    deleteLista(o);
        1:   58-block  0
call    0 returned 1
        1:   59:    free(o_sortat->lista);
        1:   60:    free(o_sortat);
        -:   61:
        1:   62:}
        -:   63:
function testFiltrareDupaCriteriu called 1 returned 100% blocks executed 83%
        1:   64:void testFiltrareDupaCriteriu(){
        1:   65:    listaOferte *o = createOList();
        1:   65-block  0
call    0 returned 1
        1:   66:    listaOferte *o_filtrat = createOList();
call    0 returned 1
        -:   67:
        1:   68:    adauga_oferta_service(o, 1, "mare", "spania", "21.02", 100);
call    0 returned 1
        1:   69:    adauga_oferta_service(o, 2, "munte", "italia", "22.03", 150);
call    0 returned 1
        1:   70:    adauga_oferta_service(o, 3, "mare", "turcia", "22.04", 300);
call    0 returned 1
        -:   71:
        1:   72:    char criteriu[25] = "tip";
        1:   73:    char argument[25] = "mare";
        -:   74:
        1:   75:    filtrareDupaCriteriu(o, o_filtrat, criteriu, argument);
call    0 returned 1
       1*:   76:    assert(o_filtrat->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   76-block  0
call    2 never executed
        -:   77:
        1:   78:    char criteriu1[25] = "destinatie";
        1:   79:    char argument1[25] = "spania";
        -:   80:
        1:   81:    listaOferte *o_filtrat1 = createOList();
        1:   81-block  0
call    0 returned 1
        1:   82:    filtrareDupaCriteriu(o, o_filtrat1, criteriu1, argument1);
call    0 returned 1
       1*:   83:    assert(o_filtrat1->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   83-block  0
call    2 never executed
        -:   84:
        1:   85:    listaOferte *o_filtrat2 = createOList();
        1:   85-block  0
call    0 returned 1
        1:   86:    char criteriu2[25] = "pret";
        1:   87:    char argument2[25] = "200";
        1:   88:    filtrareDupaCriteriu(o, o_filtrat2,  criteriu2, argument2);
call    0 returned 1
       1*:   89:    assert(o_filtrat2->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   89-block  0
call    2 never executed
        1:   90:    deleteLista(o);
        1:   90-block  0
call    0 returned 1
        1:   91:    free(o_filtrat->lista);
        1:   92:    free(o_filtrat);
        1:   93:    free(o_filtrat1->lista);
        1:   94:    free(o_filtrat1);
        1:   95:    free(o_filtrat2->lista);
        1:   96:    free(o_filtrat2);
        -:   97:
        -:   98:
        1:   99:}
