;suma(l1,l2,...ln) = { 0, daca l vida
;                      l1 + suma(l2..ln) daca l1 este atom numeric
;                      suma(l2..ln) daca l1 este atom
;                      suma(l1) + suma (l2...ln) altfel

(defun suma (l) 
       (cond 
         ((null l) 0)
         ((numberp (car l))(+(car l)(suma(cdr l))))
         ((atom (car l))(suma(cdr l)))
         (T(+(suma(car l))(suma(cdr l))))
         )
  )

(print (suma '(1 (2 a (3 4) b 5) c 1)))



;adaug(l1..ln, x) = { x, daca l vida
;                     l1 + adaug(l2..ln, x), altfel

(defun adaug (x l)
    (cond 
      ((null l) (list x))
      (T(cons (car l)(adaug x (cdr l))))
      )
 )
  
(print (adaug '3'(1 2)))



;invers(l1...ln, col) = { col, daca l vida
;                         invers(l2...ln, col) + adaug(col, l1), altfel

(defun invers (l col)
   (cond 
     ((null l) col)
     (T(invers(cdr l)(cons (car l) col)))
     )
  )

(defun invers_aux (l)
   (invers l ())
  )

(print (invers_aux '(1 2 3)))


;perechi(e, l1...ln) = { NIL daca l vida
;                        (e, l1) + perechi(e, l2...ln) altfel

(defun perechi (e l)
  (cond 
    ((null l) NIL)
    (T (cons (list e (car l))(perechi e (cdr l))))
    )
  )

(print (perechi 'A'(B C D)))


;inserare(l, a, c) = { NIL, daca l e vida
;                     l1 + inserare(l2...ln, a, c + 1) daca c mod 2 != 0
;                     a + l1 + inserare(l, a, c + 1), altfel


(defun inserare(e l c)
  (cond 
    ((null l) NIL)
    ((= (MOD c 2) 0)(append (list (car l) e) (inserare e (cdr l) (+ c 1))))
    (T (cons (car l) (inserare e (cdr l) (+ c 1))))
    )
 )

(defun inserare_aux(e l)
  (inserare e l 0)
  )

(print (inserare_aux '2 '(1 2 3 4 5 6)))




